version: "3"
services:
  frontend:
    build:
      dockerfile: Dockerfile.dev
      context: ./frontend
    container_name: frontend
    volumes:
      - "./frontend:/app"
      - "/app/node_modules"
    ports:
      - "3000:3000"
    stdin_open: true

  spring:
    build:
      context: ./spring
      dockerfile: Dockerfile
    container_name: backend
    # env_file: .env
    environment:
      # - ENV=development
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/bluememories?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1234
    # restart: always
    volumes:
      - "./spring:/usr/src/spring"
    ports:
      - 8080:8080
    depends_on:
      - mysql # mysql이 실행되고 spring container가 실행됩니다.
  mysql:
    build:
      context: ./mysql
      dockerfile: Dockerfile 
    restart: unless-stopped
    container_name: mysql
    ports:
      - "3307:3306"
    # env_file:
    #   - ./.env
    volumes:
      - ./mysql/conf.d:/etc/mysql/conf.d
      - ./mysql/data:/var/lib//mysql # mysql/data에 데이터를 담을 때 사용 합니다.
      - ./mysql/initdb.d:/docker-entrypoint-initdb.d #intidb.d의 create.sql을 실행
    environment:
      MYSQL_DATABASE: bluememories
      #MYSQL_USER: root
      MYSQL_PASSWORD: 1234
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_ALLOW_EMPTY_PASSWORD: 1234